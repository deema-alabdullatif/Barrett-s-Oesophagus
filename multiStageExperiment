function [ RMSE,RSE,SE ] = multiStageExperiment( train_images, train_labels, test_images, test_labels ,numClasses)
% this function use myCNN to run multiple stage experiment
%train_images greyscale images in my case 500*500*403
%train_labels labels of the train images (1*403)
%numClasses is the number of classes in the task


train_samples=double(train_images);
train_targets=full(sparse(double(train_labels), 1:size(train_images,3), 1));

%variables
n_iterations            = 10;            % number of iterations of training algorithm
recom_Hes_it            = 15;           % recompute diagonal Hessian every recom_Hes_it iterations
show_perf_it            = 1;            % show performance plots every show_perf_it iterations [inf - don't show]
use_LeCun_eta           = true;         % use the eta sequence, proposed by LeCun
max_subsamples          = 1;          % maximal number of samples for Hessian estimation

%------------------------------

%sparness
for i=1:numClasses
    for x=1:size(train_images,3)
        if train_targets(i,x)==0
            train_targets(i,x)=-1;
        end
    end
end

%sparness
test_samples=double(test_images);
test_targets=full(sparse(double(test_labels), 1:size(test_images,3), 1));

for i=1:numClasses
    for x=1:size(test_images,3)
        if test_targets(i,x)==0
            test_targets(i,x)=-1;
        end
    end
end

% create a new LeNet5 network
inp_rows=size(train_images,1);
inp_cols=size(train_images,2);

%specify the topology of the network---------------------------------------
if ~exist('inp_rows', 'var')  || isempty(inp_rows),  inp_rows = 32; end
if ~exist('inp_cols', 'var')  || isempty(inp_cols),  inp_cols = inp_rows; end
if ~exist('numClasses', 'var') || isempty(numClasses), numClasses = 10; end
if ~exist('eta', 'var') || isempty(eta), eta = 5e-4; end
if ~exist('momentum', 'var') || isempty(momentum), momentum = 0; end
if ~exist('parS2C3_cmat', 'var') || isempty(parS2C3_cmat),
    S2C3_cmat{1} = [1 0 0 0 1 1 1 0 0 1 1 1 1 0 1 1
        1 1 0 0 0 1 1 1 0 0 1 1 1 1 0 1
        1 1 1 0 0 0 1 1 1 0 0 1 0 1 1 1
        0 1 1 1 0 0 1 1 1 1 0 0 1 0 1 1
        0 0 1 1 1 0 0 1 1 1 1 0 1 1 0 1
        0 0 0 1 1 1 0 0 1 1 1 1 0 1 1 1]';
else
    S2C3_cmat{1} = parS2C3_cmat;
end
if ~exist('parC5_nFMs', 'var') || isempty(parC5_nFMs), parC5_nFMs = 120; end

trainable       = true;
none            = [];

% C1 layer
C1_nFMs  = size(S2C3_cmat{1}, 2);
C1_is    = [inp_rows inp_cols];
C1_ks    = [5 5];
C1_ss    = [1 1];
C1_os    = ceil((C1_is - C1_ks + 1) ./ C1_ss);

% S2 layer
S2_ks   = [2 2];
S2_is   = C1_os;
S2_ss   = S2_ks;
S2_nFMs = C1_nFMs;
S2_os   = ceil((S2_is - S2_ks + 1) ./ S2_ss);

% C3 layer
C3_nFMs = size(S2C3_cmat{1}, 1);
C3_is   = S2_os;
C3_ks   = [5 5];
C3_ss   = [1 1];
C3_os   = ceil((C3_is - C3_ks + 1) ./ C3_ss);

% S4 layer
S4_ks   = [2 2];
S4_nFMs = C3_nFMs;
S4_is   = C3_os;
S4_ss   = S4_ks;
S4_os   = ceil((S4_is - S4_ks + 1) ./ S4_ss);

% C5 layer
C5_ks   = S4_os;
C5_nFMs = parC5_nFMs;
C5_is   = S4_os;
C5_ss   = [1 1];
C5_os   = ceil((C5_is - C5_ks + 1) ./ C5_ss);

% F6 layer
F6_nFMs = numClasses;
F6_ks   = C5_os;
F6_ss   = [1 1];


S4C5_cmat{1} = ones(C5_nFMs, S4_nFMs);  % S4 is fully connected to C5

net = myCNN('LeNet', [inp_rows inp_cols], eta, momentum);  % creates object
net = add_layer(net, 'C1',  trainable, 'C', C1_nFMs, none, none, C1_ks, C1_ss);
net = add_layer(net, 'S2',  trainable, 'S', S2_nFMs, none, none, S2_ks, S2_ss);
net = add_layer(net, 'C3',  trainable, 'C', C3_nFMs, S2C3_cmat, none, C3_ks, C3_ss);
net = add_layer(net, 'S4',  trainable, 'S', S4_nFMs, none, none, S4_ks, S4_ss);
net = add_layer(net, 'C5',  trainable, 'C', C5_nFMs, S4C5_cmat, none, C5_ks, C5_ss);
net = add_layer(net, 'out', trainable, 'F', F6_nFMs, none, none, F6_ks, F6_ss);
net = update_stat(net);
net = init_net(net, 1, 2);
%--------------------------------------------------------------------------------
%train the network
[newNet E MCR] = train_LM(net, train_samples, train_targets,  test_samples, test_targets, show_perf_it, ...
    use_LeCun_eta, max_subsamples, recom_Hes_it, n_iterations);

%store the network in each epoch
global results;

%test the network
% initial evaluation
[test_err perf out test_mcr] = get_performance(newNet, test_samples, test_targets);
%compute the correctly classified
maxima = double( repmat(max(out), [numClasses 1]) == out );

correct_classifications  = sum((maxima == test_targets));
miscl_rate = 1 - sum(correct_classifications) / size(test_samples,3);
SE   = sum( (out - test_targets).^2);
RSE  = sqrt(SE);
RMSE = sqrt(mean(SE));

end

